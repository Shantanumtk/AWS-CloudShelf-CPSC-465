server:
  port: 8080

spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      routes:
        # GraphQL (book-service) â€” frontend calls /api/graphql, gateway rewrites to service /graphql
        - id: book-service
          uri: lb://book-service
          predicates:
            - Path=/api/graphql/**
          filters:
            - RewritePath=/api/graphql(?<segment>/?.*), /graphql${segment}

        # Order REST endpoint
        - id: order-service
          uri: lb://order-service
          predicates:
            - Path=/api/order

        # Author REST endpoints (already exposed at /api/authors/** in the service)
        - id: author-service
          uri: lb://author-service
          predicates:
            - Path=/api/authors/**

        # Proxy Eureka UI through the gateway (handy for access)
        - id: discovery-server
          uri: http://eureka:password@${app.eureka-server}:8761
          predicates:
            - Path=/eureka/web
          filters:
            - SetPath=/

        - id: discovery-server-static
          uri: http://eureka:password@${app.eureka-server}:8761
          predicates:
            - Path=/eureka/**

        # Optional: expose order-service actuator via gateway
        - id: order-service-actuator
          uri: lb://order-service
          predicates:
            - Path=/order-service/actuator/**
          filters:
            - StripPrefix=1

eureka:
  client:
    serviceUrl:
      defaultZone: http://discovery-server:8761/eureka
  instance:
    preferIpAddress: true

app:
  eureka-server: discovery-server

management:
  zipkin:
    tracing:
      endpoint: http://zipkin:9411/api/v2/spans
  tracing:
    sampling:
      probability: 1.0
  endpoints:
    web:
      exposure:
        include: prometheus

logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

# Allow your browser origin(s); can be overridden by .env CORS_ALLOWED_ORIGINS
cors:
  allowed:
    origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000}